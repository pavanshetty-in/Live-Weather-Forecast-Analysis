# -*- coding: utf-8 -*-
"""miniproj1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vFEItciFwdXYWfogzeh-iOKQ5DOBriD8
"""

import requests
import pandas as pd
from datetime import datetime, timedelta
import json
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns

url = "https://api.tomorrow.io/v4/timelines"
# sirsi
# location = "14.6196,74.8441"  
# Talakaveri
# location = '12.333332,75.499998'
# location = "86.611366,20.316551"
#kurumbas Aus
location = "-17.4833314,140.83333"
current_utc = datetime.utcnow()
startTime = current_utc.strftime("%Y-%m-%dT%H:%M:%SZ")
endTime = (current_utc + timedelta(days=4)).strftime("%Y-%m-%dT%H:%M:%SZ")

querystring = {"location": location, "fields": ["temperature", "humidity", "windSpeed", "windDirection", "windGust", "rainIntensity", "precipitationType", "solarGHI", "visibility", "weatherCode"],
               "units": "metric", "timesteps": "1h","startTime":startTime,"endTime":endTime, "apikey": "ykVXLbudfrMsDIEYR8UMrJP687YGK7HA"}

response = requests.request("GET", url, params=querystring)
print(response)

loc = json.loads(response.text)
intervals = loc['data']['timelines'][0]['intervals']
loc_df = pd.DataFrame([x['values'] for x in intervals])

loc_df

import pytz
ist = pytz.timezone('Asia/Calcutta')
loc_df2 = loc_df.assign(DateTime = [ pd.to_datetime(x['startTime']).tz_convert(ist) for x in intervals])
loc_df2.set_index('DateTime', inplace=True)

loc_df2

loc_df2['2022-01-20']

weather_code_map = {0: 'Unknown',
1000: 'Clear',
1001: 'Cloudy',
1100: 'Mostly Clear',
1101: 'Partly Cloudy',
1102: 'Mostly Cloudy',
2000: 'Fog',
2100: 'Light Fog',
3000: 'Light Wind',
3001: 'Wind',
3002: 'Strong Wind',
4000: 'Drizzle',
4001: 'Rain',
4200: 'Light Rain',
4201: 'Heavy Rain',
5000: 'Snow',
5001: 'Flurries',
5100: 'Light Snow',
5101: 'Heavy Snow',
6000: 'Freezing Drizzle',
6001: 'Freezing Rain',
6200: 'Light Freezing Rain',
6201: 'Heavy Freezing Rain',
7000: 'Ice Pellets',
7101: 'Heavy Ice Pellets',
7102: 'Light Ice Pellets',
8000: 'Thunderstorm'}

loc_df2['weatherCode'] = [weather_code_map[x] for x in loc_df2['weatherCode']]

loc_df2

loc_df2['weatherCode'].value_counts()

weather = dict(loc_df2['weatherCode'].value_counts())
series = pd.Series(weather.values(), index=weather.keys(), name="Weather")
series.plot.pie(figsize=(6, 6))

today= loc_df2['2022-01-20 05':'2022-01-20 22']
print("Weather on specified Date")
today['weatherCode'].value_counts().head(1)

sns.set(rc={'figure.figsize':(14,4)})
sns.set(style="darkgrid")
sns.regplot(x=loc_df2['temperature'],y= loc_df2['humidity'])

Date= [i["startTime"][:10] for i in intervals]
Time = [i["startTime"][11:16] for i in intervals]
demo_df =pd.DataFrame({'Date':Date,'Time':Time,'rainIntensity':loc_df2['rainIntensity']})

sns.set_theme(style="whitegrid", palette="pastel")

heatmap_p = demo_df.pivot("Date", "Time","rainIntensity")

f, ax = plt.subplots(figsize=(25, 6))
# YlOrBr
sns.heatmap(heatmap_p, annot=True, fmt=".2f", linewidths=.5, ax=ax,cmap="Greens")

loc_df2.describe()

rainhours = dayselect[(dayselect['precipitationType']==1) & (dayselect['rainIntensity']>0)].loc["2022-01-20"]

rainhours[['rainIntensity','weatherCode','visibility']]

print("Total Rainfall %.2f"%(rainhours['rainIntensity'].sum()))

plt.style.use("dark_background")
sns.set(rc={'figure.figsize':(24,8)})
loc_df2.loc['2022-01-20','temperature'].plot()
# loc_df2['temperature'].plot()

from math import radians
ax = plt.subplot(111, polar=True)
ax.scatter(x=[radians(x) for x in loc_df2['windDirection'].values], y=loc_df2['windSpeed'].values)
ax.set_theta_zero_location('N')
ax.set_theta_direction(-1)

# today= loc_df2['2022-01-19 00':'2022-01-19 23']
# plt.figure(figsize =(14,6))
# plt.plot(today.index,today['temperature'],today.index,today['humidity'])

# fig = plt.figure()
# ax = fig.add_axes([0,0,1,1])
# ax.bar(loc_df2.index,loc_df2['temperature'], color ='maroon', width = 0.03)
# plt.xlabel("date")
# plt.ylabel("Temperature")
# plt.show()

# plt.figure(figsize =(14,6))
# plt.plot(loc_df2.index,loc_df2['temperature'],loc_df2.index,loc_df2['humidity'])

# loc_df2.loc['2022-01-17','temperature'].plot(kind='box')

# fig, ax =plt.subplots()
# ax.imshow(loc_df['weatherCode'])